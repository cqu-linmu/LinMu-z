<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>并发编程-1-上下文切换</title>
    <link href="/linmu-blog/2024/09/01/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-1-%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/"/>
    <url>/linmu-blog/2024/09/01/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-1-%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="并发和串行执行速度对比">1. 并发和串行执行速度对比</h1><p>我们可以简单对比在计数递增的场景下，并发和串行的执行速度：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">averageTestCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++) &#123;<br>        System.out.println(<span class="hljs-string">&quot;test:&quot;</span>+count);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;averageTestCount;j++) &#123;<br>            time1 += testConcurrency(count);<br>            time2 += testSerial(count);<br>        &#125;<br>        time1 /= averageTestCount;<br>        time2 /= averageTestCount;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;并发:%s | 串行:%s | 差值:%s&quot;</span>, time1, time2, time1-time2);<br>        System.out.println(format);<br><br>        count *= <span class="hljs-number">10</span>;<br>        System.gc();<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">testConcurrency</span><span class="hljs-params">(<span class="hljs-type">long</span> count)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            a += <span class="hljs-number">5</span>;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.nanoTime();<br>    <span class="hljs-comment">// a</span><br>    thread.start();<br>    <span class="hljs-comment">// b</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> j=<span class="hljs-number">0</span>;j&lt;count;j++) &#123;<br>        b += <span class="hljs-number">5</span>;<br>    &#125;<br>    thread.join();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.nanoTime();<br>    <span class="hljs-keyword">return</span> end - start;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">testSerial</span><span class="hljs-params">(<span class="hljs-type">long</span> count)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.nanoTime();<br>    <span class="hljs-comment">// a</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> i=<span class="hljs-number">0</span>;i&lt;count;i++) &#123;<br>        a += <span class="hljs-number">5</span>;<br>    &#125;<br>    <span class="hljs-comment">// b</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> j=<span class="hljs-number">0</span>;j&lt;count;j++) &#123;<br>        b += <span class="hljs-number">5</span>;<br>    &#125;<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.nanoTime();<br>    <span class="hljs-keyword">return</span> end - start;<br>&#125;<br><br></code></pre></td></tr></table></figure> 我们可以分别测试数量为 <spanclass="math inline">\(10^4、10^5、10^6、10^7、10^8、10^9\)</span>时，并发和串行的耗时:<br></p><table><thead><tr><th>循环次数</th><th>并发行执行耗时(ns)</th><th>串行执行耗时(ns)</th><th>差值(ns)</th></tr></thead><tbody><tr><td><span class="math inline">\(10^4\)</span></td><td>352430</td><td>90920</td><td>慢261510</td></tr><tr><td><span class="math inline">\(10^5\)</span></td><td>400760</td><td>104020</td><td>慢296740</td></tr><tr><td><span class="math inline">\(10^6\)</span></td><td>632220</td><td>518520</td><td>慢113700</td></tr><tr><td><span class="math inline">\(10^7\)</span></td><td>4099540</td><td>5438800</td><td>快1339260</td></tr><tr><td><span class="math inline">\(10^8\)</span></td><td>29268920</td><td>46877000</td><td>快17608080</td></tr><tr><td><span class="math inline">\(10^9\)</span></td><td>293388350</td><td>476937870</td><td>快183549520</td></tr></tbody></table><p>从表格中我们可以发现当数量级达到百万级时，并发的提升效果才逐渐体现出来。<br>为什么明明启动了多个线程，执行的速度却更慢呢？<br>这是因为并发方法执行时存在线程创建、线程同步和上下文切换等等额外的开销。</p><hr /><h1 id="什么是上下文切换">2. 什么是上下文切换？</h1><p><strong>让程序执行得更快是并发的核心目标</strong>。然而，启动更多的线程未必能提升程序运行的速度，因为我们<em>很难做到程序得到最大限度的并发执行</em>。<br>一方面是线程创建、线程同步等操作影响了并发执行的效率，另一方面则是<strong>线程上下文切换</strong>的开销。<br></p><p>目前的大多数CPU都是支持并发执行的，这通常是通过CPU给每一个线程分配时间片这样的机制来实现的。时间片就是CPU分配给各个线程可以执行的时间。由于时间片的时间非常短，一般是几十毫秒，所以CPU会不停的的切换执行的线程，这样从宏观维度上让我们感觉多个线程在同时执行。<br></p><p>在发生执行的线程切换时，我们需要保存当前线程已执行的位置和一些中间状态等信息，以便于后续该线程再次执行时可以加载到当前的执行状态。<strong>这些线程切换时保存的信息就是上下文，线程从保存信息再到加载恢复的过程就是一次上下文切换</strong>。<br></p><hr /><h1 id="减少上下文切换">3. 减少上下文切换</h1><h2 id="无锁并发">3.1. 无锁并发</h2><p>多线程竞争锁时，会引起额外的上下文切换。因此我们可以通过在并发编程时尽量避免锁竞争，来减少上下文切换的开销。<br>这里有两种避免锁竞争的方式:<br> -避免线程冲突，如提前划分好各线程处理的资源，各线程独立处理各自部分的数据。- CAS算法，Java中JUC包内大量采用了本算法来提供线程安全的解决方案。</p><h2 id="减少线程使用数量">3.2. 减少线程使用数量</h2><p>当任务数量小于线程数量时，会有部分线程处于等待状态，等待状态的线程同样会获取时间片，因此会产生空耗的上下文切换。<br>因此尽量减少线程的数量可以减少上下文切换次数。</p><h2 id="协程">3.3. 协程</h2><p>协程通过在单个线程内实现多任务的调度，可以避免大量的上下文切换。</p><h1 id="上下文切换优化实战">4. 上下文切换优化实战</h1><p><strong>第一步，获取dump线程信息</strong><br> 通过 jstack 命令获取pid 为 31177 的进程的线程信息 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -u admin jstack 31177 &gt; dumpTest<br></code></pre></td></tr></table></figure></p><p><strong>第二步，查看线程状态统计</strong><br> 通过grep、awk、sort、uniq 等命令统计线程状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep java.lang.Thread.State dumpTest | awk &#x27;&#123;print $2$3$4$5&#125;&#x27; | sort | uniq -c<br></code></pre></td></tr></table></figure><p>结果如下：<br></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">39 </span>RUNNABLE<br><span class="hljs-symbol">21 </span>TIMED_WAITING(onobjectmonitor)<br><span class="hljs-symbol">6 </span>TIMED_WAITING(parking)<br><span class="hljs-symbol">51 </span>TIMED_WAITING(sleeping)<br><span class="hljs-symbol">305 </span>WAITING(onobjectmonitor)<br><span class="hljs-symbol">3 </span>WAITING(parking)<br></code></pre></td></tr></table></figure><p>这里发现有 300 多个线程处于 <code>WAITING(onobjectmonitor)</code>状态。<br></p><p><strong>第三步，查看线程的具体执行信息</strong><br> 到 dump文件中查看处于 <code>WAITING(onobjectmonitor)</code>状态的线程的具体执行信息。<br>若发现这些线程大多属于某个工作线程，且状态为<code>await</code>，则较大可能该工作线程内存在大量闲置线程。<br></p><p><strong>第四步，调整线程使用</strong><br>如该工作线程中使用了线程池，那么适当调整该线程池的配置，如核心线程数、最大线程数、线程空闲时间等。</p><p><strong>第五步，重复以上操作调优</strong><br>重启应用，重复前四步操作。</p><hr />]]></content>
    
    
    <categories>
      
      <category>并发编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发编程</tag>
      
      <tag>多线程</tag>
      
      <tag>上下文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区块链-2-区块链中的数据结构</title>
    <link href="/linmu-blog/2024/08/27/%E5%8C%BA%E5%9D%97%E9%93%BE-2-%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/linmu-blog/2024/08/27/%E5%8C%BA%E5%9D%97%E9%93%BE-2-%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="hash-pointer-哈希指针">1.hash pointer 哈希指针</h1><p>哈希指针与普通指针不同的是，哈希指针中不仅指向了某个结构体，并且还保存了该结构体的哈希值。</p><p>哈希指针不仅指向了结构体，并且还能检测该结构体是否被篡改。</p><h1 id="block-chain-区块链">2. block chain 区块链</h1><p>区块链就是使用哈希指针代替普通指针的链表。</p><p>第一个区块称为 <strong>genesis block 创世纪块</strong>。</p><p>最后一个区块称为 <strong>most recent block最近块</strong>，最近块的哈希值存储在系统内。</p><blockquote><p><strong>tamper-evident log 防篡改日志</strong></p><p>我们只需要保存最近块的哈希值，就可以校验整个区块链是否被篡改。</p></blockquote><h1 id="merkle-tree-默克尔树">3. merkle tree 默克尔树</h1><p>默克尔树就是使用哈希指针代替普通指针的二叉树。</p><p>默克尔树的叶子节点是数据块，存储实际的数据；非叶子节点保存了其左右子节点的哈希值。</p><p>通过保存根节点的哈希值，就可以校验整个默克尔树是否被篡改。</p><blockquote><p>比特币中，默克尔树存储于 <strong>block body区块身</strong>，默克尔树的根哈希值存储于 <strong>block header区块头</strong>。默克尔树的叶子节点（数据块）中存储 <strong>TX(Transaction) 交易</strong>。</p></blockquote><p><strong>merkle proof 默克尔证明</strong></p><p>比特币的使用端有两种：全节点和轻节点</p><p>全节点：保存了整个区块的内容。</p><p>轻节点：仅保存了区块头的内容。</p><p>轻节点可以使用默克尔证明来校验某一个 TX 交易的真实性：</p><ol type="1"><li><p>轻节点向全节点请求交易所在叶子节点到根节点路径上另一边的哈希值。</p></li><li><p>轻节点根据交易对象提供的 TX 交易计算哈希值。</p></li><li><p>将计算得到的哈希值与请求得到的另一边的哈希值结合为非叶子节点，然后对非叶子节点求哈希值。如此迭代，直到计算出一个根哈希值。</p></li><li><p>将计算得到的根哈希值与区块头中保存的根哈希值比较，最终校验交易是否已经写到区块链上。</p></li></ol><p>默克尔证明的时间复杂度为 <spanclass="math inline">\(O(log(n))\)</span></p><blockquote><p>sorted merkle tree 排序的默克尔树</p><p>默克树可以在<spanclass="math inline">\(O(log(n))\)</span>的复杂度下证明交易存在于某个区块，而证明区块中不包含某个交易，则需要<spanclass="math inline">\(O(n)\)</span>的时间复杂度。</p><p>对于排序的默克尔树，则可以实现<spanclass="math inline">\(O(log(n))\)</span>复杂度证明区块中不存在某个交易。</p><p>比特币中没有用到排序的默克尔树。</p></blockquote><h1 id="扩展其他的数据结构">4. 扩展其他的数据结构</h1><p><strong>无环的数据结构均可以通过让哈希指针替换普通指针形成新数据结构。</strong></p><p>有环的区块下，哈希指针会产生循环依赖，因此较难找到这样的一个数据结构。</p>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
      <tag>hash</tag>
      
      <tag>比特币</tag>
      
      <tag>哈希指针</tag>
      
      <tag>默克尔树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区块链-1-区块链中的密码学</title>
    <link href="/linmu-blog/2024/08/27/%E5%8C%BA%E5%9D%97%E9%93%BE-1-%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    <url>/linmu-blog/2024/08/27/%E5%8C%BA%E5%9D%97%E9%93%BE-1-%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>Crypto-Currency 加密货币其实本身不加密</p><h1 id="cryptographic-hash-function密码哈希函数">1. cryptographic hashfunction密码哈希函数</h1><p>比特币中的哈希函数：SHA-256 (Secure Hash Algorithm 256)</p><h2 id="collision-resistance-抗哈希碰撞性">1.1. collision resistance抗哈希碰撞性</h2><p>含义：无法高效的方法寻找两个哈希碰撞的输入。</p><p>说明：已知 <span class="math inline">\(H(x_1) =y\)</span>，没有一个高效的方法可以寻找到 <spanclass="math inline">\(x_2\)</span> 使得 <spanclass="math inline">\(H(x_2) = y\)</span>。</p><p>无法证明一个哈希函数具备抗哈希碰撞性。</p><h2 id="hiding-隐藏性">1.2. hiding 隐藏性</h2><p>含义：哈希函数是单向的，根据输出值无法高效找到输入值。</p><p>说明：已知 <span class="math inline">\(H(x) = y\)</span>，但 <spanclass="math inline">\(x\)</span>未知，没有一个高效的方法可以根据 <spanclass="math inline">\(y\)</span> 找到 <spanclass="math inline">\(x\)</span>。</p><p>hiding 的前提是输入空间足够大且映射分布较均匀。</p><blockquote><p>digital commitment 数字签名 (又称为 digital equivalent of a sealedenvelope 数字化的密封信封)</p><p>输入值后拼接一个随机数，来使得整体输入随机且分布均匀。</p></blockquote><h2 id="puzzle-friendly-无法预测性">1.3. puzzle friendly 无法预测性</h2><p>含义：无法根据输入值去预测输出值或输出值的特征。</p><blockquote><p>挖矿：找到一个随机数 nonce 和 block header区块头的其他信息合并在一起，使得 H(block header) &lt;= target</p></blockquote><h1 id="asymmetric-encryption-algorithm-非对称加密">2. asymmetricencryption algorithm 非对称加密</h1><p>symmetric encryption algorithm 对称加密</p><p>通讯双方在通讯前，提前约定好密钥，然后双方基于这个密钥对信息进行加解密。</p><blockquote><p>对称加密时，密码的分发过程不安全。如果密钥泄露了，那么攻击者就可以获取到所有通讯信息。</p></blockquote><p>asymmetric encryption algorithm 非对称加密</p><p>非对称加密是基于一对公私钥，私钥需要持有人保密，公钥无需保密，可以发送给任何人。</p><p>公私钥有两种用法：</p><ul><li><p>公钥加密，私钥解密：保证加密数据仅有私钥的持有者才能解密。</p></li><li><p>私钥加密，公钥解密：保证加密数据来自于私钥的持有者。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
      <tag>hash</tag>
      
      <tag>比特币</tag>
      
      <tag>密码学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL的日志</title>
    <link href="/linmu-blog/2024/08/27/MySQL%E7%9A%84%E6%97%A5%E5%BF%97/"/>
    <url>/linmu-blog/2024/08/27/MySQL%E7%9A%84%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql日志概述">MySQL日志概述</h1><p>MySQL的日志包含服务日志(Server Log)和默认存储引擎InnoDB日志(InnoDBLog)两个模块，细分下去有错误日志(Error Log)、通用查询日志(General QueryLog)、二进制日志(Binary Log)、慢查询日志(Slow QueryLog)、数据定义语句日志(DDL Log)、重做日志(Redo Log)、回滚日志(UndoLog)。其关系图如下：<br /><imgsrc="1.jpeg" /><br />这几种日志的功能比较好理解：</p><ul><li><p>错误日志 &gt;记录了mysqld启动和关闭的时间、整个从启动到关闭的运行期间的诊断消息（错误、警告、提示）。</p></li><li><p>通用查询日志 &gt;记录了客户端断开和连接时的信息，以及所有客户端发送给mysqld的SQL语句。</p></li><li><p>慢查询日志 &gt;慢查询日志记录了执行时间超过long_query_time秒并且查询记录行数超过min_examined_row_limit行的SQL语句信息。</p></li><li><p>DDL日志 &gt;DDL日志又称元数据日志记录了数据定义语句产生的会影响表格分区的元数据操作。</p></li></ul><p>下面我们将详细说明稍微复杂一些的三个日志。</p><h1 id="二进制日志-binary-log">二进制日志 Binary Log</h1><h2 id="二进制日志的作用">二进制日志的作用</h2><p>二进制日志包含了所有数据库修改的操作，例如创建表、修改表数据。如果没有配置为row-based模式的话，二进制日志还会包含可能产生修改的语句，例如不匹配任何行的delete语句。每一条修改数据语句的执行时间也同样记录在二进制日志。<br />二进制日志主要是为了：</p><ul><li><p>复制 &gt;二进制日志包含了数据库创建以来所有的修改操作及数据，因此通过在其他服务上重复这些修改，即可实现数据库的完整复制。</p></li><li><p>数据恢复<br />一些数据恢复操作需要使用到二进制日志。备份恢复后，二进制日志中在备份后记录的事件将被重新执行。这些事件会将数据库从备份时间点恢复到最新状态。</p></li></ul><p>在启用二进制日志的情况下运行服务器，性能会略微降低。不过相比于二进制日志在复制和还原操作方面的优势，这种性能损失是可以接受的。<br />由于只会记录和回读完整的事务，二进制日志是完整的，一般不会意外停止。</p><h2 id="二进制日志格式">二进制日志格式</h2><p>服务器通过配置<code>--binlog-format</code>有三种格式保存二进制日志：</p><ul><li>语句<code>STATEMENT</code></li><li>行<code>ROW</code></li><li>混合<code>MIXED</code></li></ul><p>语句格式<code>STATEMENT</code>是通过之间记录原始的SQL语句，日志中会保留函数的调用，例如update_time=now()。这样可能导致数据库的不一致。<br />行格式<code>ROW</code>则是将语句细化为对行的影响进行记录。因此表必须始终存在主键来标识行。<br />混合格式<code>MIXED</code>通过混合<code>STATEMENT</code>和<code>ROW</code>，默认通过<code>STATEMENT</code>进行记录，但在一些情况下会自动切换到<code>ROW</code>模式下记录。<br />日志记录格式也可由所使用的存储引擎设置或限制。这有助于消除在使用不同存储引擎的源和副本之间复制某些语句时出现的问题。</p><h1 id="重做日志-redo-log">重做日志 Redo Log</h1><p>重做日志是一种基于磁盘的数据结构，在崩溃恢复期间用于纠正未完成事务写入的数据。<br />在正常运行期间，重做日志会对SQL 语句或底层 API调用产生的更改表数据的请求进行编码。在意外关机前未完成更新数据文件的修改会在初始化期间和接受连接前自动重放。<br />默认情况下，重做日志在磁盘上由两个名为ib_logfile0 和 ib_logfile1 的文件物理表示。MySQL以循环方式写入重做日志文件。</p><h1 id="回滚日志-undo-log">回滚日志 Undo Log</h1><p>回滚日志是与单个读写事务相关的回滚日志记录的集合。回滚日志包含着如何回滚最新的聚类索引记录的改动。<br />如果其他事务需要查看原先的数据作为一致性读操作，则会检索回滚日志从而获取未改动的数据。这样为其他事务提供快照读，也被称为多版本并发控制<code>MVCC</code>。<br />回滚日志保存在回滚日志段内，回滚日志段包含在回滚段里面。回滚段则在系统表空间、重做表空间和临时表空间中。</p><h1 id="总结">总结</h1><p>二进制日志与备份合作可以保证数据库恢复到最新的事务提交的时刻。二进制日志也作用于实现数据库的高可用，如主备、主从等模式的同步都需要二进制日志完成。二进制日志侧重于一致性。<br />重做日志聚焦于将为提交的事务操作持久化，用于奔溃恢复期间对于未完成的事务的恢复，体现了持久性。<br />回滚日志主要是在发生异常时，将已经生效的操作进行回滚，从而保障事务的原子性。<br />上面分开说明了三个日志的侧重点，然而三者并不是独立运作的，在绝大部分场景下其实是相互结合发挥作用，如重做日志和二进制日志也一同作为二阶段提交的重要阶段来保障事务的原子性；二进制日志对已提交事务的持久化是重做日志运作的基础。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROS OpenSSL SSL连接建立</title>
    <link href="/linmu-blog/2024/08/27/ROS-OpenSSL-SSL%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B/"/>
    <url>/linmu-blog/2024/08/27/ROS-OpenSSL-SSL%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[<h1id="ros-openssl-ssl-connection-build">ROS-OpenSSL-SSL-Connection-Build</h1><p>重庆大学国家卓越工程师学院-智能汽车软件-智能网联汽车信息安全-实验<br /><strong>✨✨✨实验环境✨✨✨：</strong><br />Windows 10 LinuxSubsystem<br />BRANCH: vb_release<br />RELEASE: Ubuntu 20.04.3LTS<br />KERNEL: Linux 5.10.16.3-microsoft-standard-WSL2<br />openssl版本：OpenSSL 1.1.1f 31 Mar 2020</p><p><strong>✨✨✨实验准备✨✨✨：</strong><br />创建三级证书链。<br /><ahref="https://cqu-linmu.github.io/linmu-blog/2024/08/27/ROS-OpenSSL-X509-%E8%AF%81%E4%B9%A6%E9%93%BE%E6%9E%84%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81/">ROSOpenSSL X509 证书链构建及自定义验证</a></p><h1 id="ssl-建立连接">SSL 建立连接</h1><p>SSL 建立连接的过程可以大致分为：</p><ol type="1"><li>握手阶段：确定加密套件，进行身份验证。</li><li>密钥协商阶段：协商确定后续通信使用的对称密钥。</li><li>校验阶段：根据之前通信内容生成hash。</li></ol><p>这里大致的流程图如下：<br /><img src="1.png"alt="SSL 建立连接流程图" /></p><blockquote><p>图中密钥协商使用的是 ECDHE密钥协商算法，后续实验也是使用这个算法。</p></blockquote><p>详细的知识点说明许多文章已经写地非常详尽，这里就直接给出几个个博客，本文就不再赘述了。<br />相关参考资料：<br /><ahref="http://t.csdn.cn/MLs6W">SSL协议原理详解_ssl原理_曹世宏的博客的博客-CSDN博客</a><br /><ahref="http://t.csdn.cn/Sp9sb">TLS/SSL 协议详解 (30)SSL中的RSA、DHE、ECDHE、ECDH流程与区别_ssldh和rsa区别_Mrpre的博客-CSDN博客</a><br /><ahref="http://t.csdn.cn/mfwoC">密钥协商算法的演变 —— RSA算法 - DH算法 -DHE算法 - ECDHE算法_故里有长安丶丶的博客-CSDN博客</a></p><h1 id="ros-服务介绍">ROS 服务介绍</h1><p>服务是ROS中的一种通信方法。它与话题通信的区别是，服务允许客户端（Client）发送请求（request）到服务端（Server）并等候服务端的响应（response）。因此，服务机制是一种双向的同步通信机制，且实现一对多的通信。<br /><br />在使用时，需要首先启动Master节点，然后运行 Server 节点，最后开启 Client 节点。<br />这里在Server 中需要编写回调函数用于处理 Client 的请求。Client内要组装请求信息，并通过 Client 的 call 方法发起请求。这里的 call方法是阻塞的，所以在后续代码中可以直接使用 请求的返回信息。</p><figure><img src="2.png" alt="ROS 服务架构" /><figcaption aria-hidden="true">ROS 服务架构</figcaption></figure><h1 id="代码">代码</h1><p><ahref="https://github.com/LinMu-z/ROS-OpenSSL-SSL-Build-Connect">GitHub -LinMu-z/ROS-OpenSSL-SSL-Build-Connect</a><br /><ahref="https://gitee.com/forestwood/ROS-OpenSSL-SSL-Build-Connect">Gitee- 林木/ROS-OpenSSL-SSL-Build-Connect</a> &gt;注意本实验中实现的SSL连接建立过程为简化，没有加上hash计算。读者可自行学习后补充。</p><h2 id="核心代码讲解">核心代码讲解</h2><p>在 OpenSSL 中对于 ECDHE 算法的实现主要通过 EC_KEY及其相关类，这里将其相关流程抽象为工具类 KeyAgree如下：<br />每一次创建连接都需要创建一次密钥对，这里创建的过程放在了，里面主要包含获取公私钥的方法，其中公钥是需要传输的给对方的。<br />其中有两个私有方法，为公钥的数据类型转换函数。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;openssl/ec.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;openssl/ecdh.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;openssl/obj_mac.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KeyAgree</span> &#123;<br>    <span class="hljs-keyword">private</span>:<br>        EC_KEY* ec_key;<br>        <span class="hljs-type">const</span> EC_GROUP* group;<br>        EC_POINT* key_other;<br>        <span class="hljs-comment">// ec_point 转为 string</span><br>        <span class="hljs-function">EC_POINT* <span class="hljs-title">ec_point_from_string</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; str)</span></span>;<br>        <span class="hljs-comment">// string 转为 ec_point</span><br>        <span class="hljs-function">string <span class="hljs-title">ec_point_to_string</span><span class="hljs-params">(<span class="hljs-type">const</span> EC_POINT* point)</span></span>;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">KeyAgree</span>();<br>        ~<span class="hljs-built_in">KeyAgree</span>();<br>        <span class="hljs-function"><span class="hljs-type">const</span> BIGNUM* <span class="hljs-title">getPrivateKey</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-function">string <span class="hljs-title">getPublicKey</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setOtherKey</span><span class="hljs-params">(string keyStr)</span></span>;<br>        <span class="hljs-function">string <span class="hljs-title">getShareKey</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure></p><p>在构造函数内，首先设定了 ECDHE 算法使用的椭圆曲线，然后生成密钥对。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp">KeyAgree::<span class="hljs-built_in">KeyAgree</span>() &#123;<br>    <span class="hljs-comment">// 指定曲线</span><br>    ec_key = <span class="hljs-built_in">EC_KEY_new_by_curve_name</span>(NID_X9_62_prime256v1);<br>    <span class="hljs-keyword">if</span> (!ec_key) &#123;<br>        cerr &lt;&lt; <span class="hljs-string">&quot;Failed to create EC key.&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 生成密钥对</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">EC_KEY_generate_key</span>(ec_key) != <span class="hljs-number">1</span>) &#123;<br>        cerr &lt;&lt; <span class="hljs-string">&quot;Failed to generate EC key.&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 获取密钥组</span><br>    group = <span class="hljs-built_in">EC_KEY_get0_group</span>(ec_key);<br>&#125;<br></code></pre></td></tr></table></figure></p><p>在获取公钥函数中，首先通过 EC_KEY_get0_public_key方法从密钥对中提取公钥，这里看到 公钥的数据类型为EC_POINT，为了便于传输我们这里将其串行化。同时为了提高log的可读性，我们将其转化为十六进制。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">string <span class="hljs-title">KeyAgree::getPublicKey</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 获取私钥</span><br>    <span class="hljs-type">const</span> EC_POINT* key = <span class="hljs-built_in">EC_KEY_get0_public_key</span>(ec_key);<br>    cout &lt;&lt; <span class="hljs-string">&quot;Public key:&quot;</span> &lt;&lt; endl;<br><br>    <span class="hljs-comment">// 密钥转为字符串</span><br>    string str = <span class="hljs-built_in">ec_point_to_string</span>(key);<br>    cout &lt;&lt; <span class="hljs-built_in">string_to_hex</span>(str) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>生成对称密钥首先需要设置密钥的长度，然后提前创建号密钥的缓冲区，这里使用vector来保存。然后通过输入对方的对等公钥和自身的密钥对。<br />最后将其转化为字符串返回。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">string <span class="hljs-title">KeyAgree::getShareKey</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 设置对称密钥长度</span><br>    <span class="hljs-type">size_t</span> shared_key_len = <span class="hljs-number">32</span>;<br>    <span class="hljs-comment">// 用于保存对称密钥</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>&gt; <span class="hljs-title">shared_key</span><span class="hljs-params">(shared_key_len)</span></span>;<br>    <span class="hljs-comment">// 生成对称密钥 (密钥缓存区，密钥长度，对等公钥，本地密钥对)</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ECDH_compute_key</span>(shared_key.<span class="hljs-built_in">data</span>(), shared_key.<span class="hljs-built_in">size</span>(), key_other, ec_key, <span class="hljs-literal">NULL</span>) != shared_key_len) &#123;<br>        cerr &lt;&lt; <span class="hljs-string">&quot;Failed to compute shared key.&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">// 转为字符串</span><br>    <span class="hljs-function">string <span class="hljs-title">str</span><span class="hljs-params">(shared_key.begin(), shared_key.end())</span></span>;<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br></code></pre></td></tr></table></figure></p><h1 id="实验结果">实验结果</h1><p><img src="3.png" alt="服务器端" /><br /> <img src="4.png"alt="客户端" /><br /> 分析：<br /> 首先由客户端向服务器发送了 hello消息，里面包含了证书套件，然后服务器返回消息中确定了证书套件并附上了证书链。<br />之后客户端对证书进行验证，并验证成功。<br />客户端生成了对等公钥发送给了服务器，服务器接收到之后马上同样生成了公钥并传给客户端。两者都根据对方的对等公钥及自身的密钥对生成了对称密钥。可以看到双方的对称公钥生成是相同的。<br />然后客户端 拟定了一条 finish 消息，里面包含了 "hello server!"，并通过对称公钥使用 AES对消息内容进行加密，然后传输给了服务器。服务器接收到之后回复了 "helloclient!" 同样使用了 AES 进行加密。</p>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROS</tag>
      
      <tag>OpenSSL</tag>
      
      <tag>SSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROS OpenSSL X509 证书链构建及自定义验证</title>
    <link href="/linmu-blog/2024/08/27/ROS-OpenSSL-X509-%E8%AF%81%E4%B9%A6%E9%93%BE%E6%9E%84%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81/"/>
    <url>/linmu-blog/2024/08/27/ROS-OpenSSL-X509-%E8%AF%81%E4%B9%A6%E9%93%BE%E6%9E%84%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h1id="ros-openssl-x509-certificate-verification">ROS-OpenSSL-X509-Certificate-Verification</h1><p>重庆大学国家卓越工程师学院-智能汽车软件-智能网联汽车信息安全-实验<br /><strong>✨✨✨实验环境✨✨✨：</strong><br />Windows10 Linux Subsystem<br />BRANCH: vb_release<br />RELEASE: Ubuntu 20.04.3LTS<br />KERNEL: Linux 5.10.16.3-microsoft-standard-WSL2<br />openssl版本：OpenSSL 1.1.1f 31 Mar 2020</p><h1 id="创建证书链">1. 创建证书链</h1><h2 id="创建根证书">1.1. 创建根证书</h2><h3 id="创建根ca目录">1.1.1. 创建根CA目录</h3><p>在自己定义的地方创建CA目录及根CA目录： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &#123;自定义目录&#125;<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p ./ca_dir/root/key<br><span class="hljs-built_in">cd</span> ./ca_dir/root<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> newcerts<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">touch</span> index.txt<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">touch</span> index.txt.attr<br>su root<br><span class="hljs-comment"># 输入密码</span><br><span class="hljs-built_in">echo</span> 01 &gt; serial<br>su &#123;用户名&#125;<br></code></pre></td></tr></table></figure></p><h3 id="创建配置文件">1.1.2. 创建配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim openssl.cnf<br></code></pre></td></tr></table></figure><p>按i进入编辑模式，粘贴以下配置(注意其中的 dir 要修改为自己的目录)<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[ ca ]</span><br><span class="hljs-attr">default_ca</span>= CA_default<br> <br><span class="hljs-section">[ CA_default ]</span><br><span class="hljs-attr">dir</span>    = &#123;自定义目录&#125;/ca_dir/root/<br><span class="hljs-attr">certs</span>= <span class="hljs-variable">$dir</span>/certs<br><span class="hljs-attr">crl_dir</span>= <span class="hljs-variable">$dir</span>/crl<br><span class="hljs-attr">database</span>= <span class="hljs-variable">$dir</span>/index.txt<br><span class="hljs-attr">new_certs_dir</span>= <span class="hljs-variable">$dir</span>/newcerts<br><span class="hljs-attr">certificate</span>= <span class="hljs-variable">$dir</span>/key/&#123;自定义根证书名&#125;.crt<br><span class="hljs-attr">serial</span>= <span class="hljs-variable">$dir</span>/serial<br><span class="hljs-attr">crlnumber</span>= <span class="hljs-variable">$dir</span>/crlnumber<br><span class="hljs-attr">crl</span>    = <span class="hljs-variable">$dir</span>/crl.pem<br><span class="hljs-attr">private_key</span>= <span class="hljs-variable">$dir</span>/key/&#123;自定义根私钥名&#125;.pem<br><span class="hljs-attr">RANDFILE</span>= <span class="hljs-variable">$dir</span>/key/.rand<br><span class="hljs-attr">unique_subject</span>= <span class="hljs-literal">no</span><br> <br><span class="hljs-attr">x509_extensions</span>= usr_cert<br><span class="hljs-attr">copy_extensions</span> = copy<br> <br><span class="hljs-attr">name_opt</span> = ca_default<br><span class="hljs-attr">cert_opt</span> = ca_default<br> <br><span class="hljs-attr">default_days</span>= <span class="hljs-number">365</span><br><span class="hljs-attr">default_crl_days</span>= <span class="hljs-number">30</span><br><span class="hljs-attr">default_md</span>= sha256<br><span class="hljs-attr">preserve</span>= <span class="hljs-literal">no</span><br><span class="hljs-attr">policy</span>= policy_ca<br> <br><span class="hljs-section">[ policy_ca ]</span><br><span class="hljs-attr">countryName</span>= supplied<br><span class="hljs-attr">stateOrProvinceName</span>= supplied<br><span class="hljs-attr">organizationName</span>= supplied<br><span class="hljs-attr">organizationalUnitName</span>= supplied<br><span class="hljs-attr">commonName</span>= supplied<br><span class="hljs-attr">emailAddress</span>= optional<br> <br><span class="hljs-section">[ req ]</span><br><span class="hljs-attr">default_bits</span>= <span class="hljs-number">2048</span><br><span class="hljs-attr">default_keyfile</span> = privkey.pem<br><span class="hljs-attr">distinguished_name</span>= req_distinguished_name<br><span class="hljs-attr">attributes</span>= req_attributes<br><span class="hljs-attr">x509_extensions</span>= v3_ca<br><span class="hljs-attr">string_mask</span> = utf8only<br><span class="hljs-attr">utf8</span> = <span class="hljs-literal">yes</span><br><span class="hljs-attr">prompt</span>                  = <span class="hljs-literal">no</span><br> <br><span class="hljs-section">[ req_distinguished_name ]</span><br><span class="hljs-attr">countryName</span>= CN<br><span class="hljs-attr">stateOrProvinceName</span>= ChongQing<br><span class="hljs-attr">localityName</span>= ChongQing<br><span class="hljs-attr">organizationName</span>        = CQU<br><span class="hljs-attr">organizationalUnitName</span>= Root CA<br><span class="hljs-attr">commonName</span>= cQU Root CA<br> <br><span class="hljs-section">[ usr_cert ]</span><br><span class="hljs-attr">basicConstraints</span> = CA:<span class="hljs-literal">TRUE</span><br> <br><span class="hljs-section">[ v3_ca ]</span><br><span class="hljs-attr">basicConstraints</span> = CA:<span class="hljs-literal">TRUE</span><br> <br><span class="hljs-section">[ req_attributes ]</span><br></code></pre></td></tr></table></figure> 编辑完成后按esc退出插入模式，按 :wq完成保存退出。<br />目前得到目录文件如下：<br /><img src="1.png"alt="image.png" /></p><h3 id="创建根证书-1">1.1.3. 创建根证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建根私钥</span><br><span class="hljs-built_in">sudo</span> openssl genrsa -out ./key/root_private_key.pem 2048<br></code></pre></td></tr></table></figure><p><img src="2.png" alt="image.png" /> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> openssl req -new -key ./key/root_private_key.pem -out ./key/root.csr -config openssl.cnf<br></code></pre></td></tr></table></figure> <img src="3.png"alt="image.png" /><br />这里没有任何输出log <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> openssl ca -selfsign -<span class="hljs-keyword">in</span> ./key/root.csr -out ./key/root.crt -config openssl.cnf<br></code></pre></td></tr></table></figure>这里由于前面的配置文件中指定了根私钥的位置，所以没有通过 -key来指定私钥。<br /><img src="4.png"alt="image.png" /><br />到这里就完成了根证书的自签名了，我们可以通过以下命令查看证书信息：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl x509 -text -<span class="hljs-keyword">in</span> ./key/root.crt<br></code></pre></td></tr></table></figure> <img src="5.png"alt="image.png" /><br />这样我们就得到了根CA证书，其可以用于签发二级代理CA，而不可用于签发服务器CA证书。<br />而当前的CA目录如下：<br /><imgsrc="6.png" alt="image.png" /><br />ps: 这里作者是通过Visual Studio Code的远程连接插件连接的WSL，这样可以较为方便地管理文件及编写代码。</p><h2 id="创建二级ca代理证书">1.2. 创建二级CA代理证书</h2><h3 id="创建代理ca目录">1.2.1. 创建代理CA目录</h3><p>这里首先如同创建根证书目录时类似： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ..<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> agent<br><span class="hljs-built_in">cd</span> agent<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> key<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> newcerts<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">touch</span> index.txt<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">touch</span> index.txt.attr<br>su root<br><span class="hljs-comment"># 输入密码</span><br><span class="hljs-built_in">echo</span> 01 &gt; serial<br>su &#123;用户名&#125;<br></code></pre></td></tr></table></figure>得到结构如下：<br /><img src="7.png"alt="image.png" /><br />注意agent和root目录是平级的。</p><h3 id="创建代理ca配置文件">1.2.2. 创建代理CA配置文件</h3><p>在agent目录中创建配置文件openssl.cnf <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim openssl.cnf<br></code></pre></td></tr></table></figure> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[ ca ]</span><br><span class="hljs-attr">default_ca</span>= CA_default<br> <br><span class="hljs-section">[ CA_default ]</span><br><span class="hljs-attr">dir</span>    = &#123;自定义目录&#125;/ca_dir/agent/<br><span class="hljs-attr">certs</span>= <span class="hljs-variable">$dir</span>/certs<br><span class="hljs-attr">crl_dir</span>= <span class="hljs-variable">$dir</span>/crl<br><span class="hljs-attr">database</span>= <span class="hljs-variable">$dir</span>/index.txt<br><span class="hljs-attr">new_certs_dir</span>= <span class="hljs-variable">$dir</span>/newcerts<br><span class="hljs-attr">certificate</span>= <span class="hljs-variable">$dir</span>/key/&#123;自定义代理CA证书文件名&#125;.crt<br><span class="hljs-attr">serial</span>= <span class="hljs-variable">$dir</span>/serial<br><span class="hljs-attr">crlnumber</span>= <span class="hljs-variable">$dir</span>/crlnumber<br><span class="hljs-attr">crl</span>    = <span class="hljs-variable">$dir</span>/crl.pem<br><span class="hljs-attr">private_key</span>= <span class="hljs-variable">$dir</span>/key/&#123;自定义代理CA私钥文件名&#125;.pem<br><span class="hljs-attr">RANDFILE</span>= <span class="hljs-variable">$dir</span>/key/.rand<br><span class="hljs-attr">unique_subject</span>= <span class="hljs-literal">no</span><br> <br><span class="hljs-attr">x509_extensions</span>= usr_cert<br><span class="hljs-attr">copy_extensions</span> = copy<br> <br><span class="hljs-attr">name_opt</span> = ca_default<br><span class="hljs-attr">cert_opt</span> = ca_default<br> <br><span class="hljs-attr">default_days</span>= <span class="hljs-number">365</span><br><span class="hljs-attr">default_crl_days</span>= <span class="hljs-number">30</span><br><span class="hljs-attr">default_md</span>= sha256<br><span class="hljs-attr">preserve</span>= <span class="hljs-literal">no</span><br><span class="hljs-attr">policy</span>= policy_ca<br> <br><span class="hljs-section">[ policy_ca ]</span><br><span class="hljs-attr">countryName</span>= supplied<br><span class="hljs-attr">stateOrProvinceName</span>= supplied<br><span class="hljs-attr">organizationName</span>= supplied<br><span class="hljs-attr">organizationalUnitName</span>= supplied<br><span class="hljs-attr">commonName</span>= supplied<br><span class="hljs-attr">emailAddress</span>= optional<br> <br><span class="hljs-section">[ req ]</span><br><span class="hljs-attr">default_bits</span>= <span class="hljs-number">2048</span><br><span class="hljs-attr">default_keyfile</span> = privkey.pem<br><span class="hljs-attr">distinguished_name</span>= req_distinguished_name<br><span class="hljs-attr">attributes</span>= req_attributes<br><span class="hljs-attr">x509_extensions</span>= v3_ca<br><span class="hljs-attr">string_mask</span> = utf8only<br><span class="hljs-attr">utf8</span> = <span class="hljs-literal">yes</span><br><span class="hljs-attr">prompt</span> = <span class="hljs-literal">no</span><br> <br><span class="hljs-section">[ req_distinguished_name ]</span><br><span class="hljs-attr">countryName</span>= CN<br><span class="hljs-attr">stateOrProvinceName</span>= ChongQing<br><span class="hljs-attr">localityName</span>= ChongQing<br><span class="hljs-attr">organizationName</span>        = CQU<br><span class="hljs-attr">organizationalUnitName</span>= agent CA<br><span class="hljs-attr">commonName</span>= CQU agent CA<br> <br><span class="hljs-section">[ usr_cert ]</span><br><span class="hljs-attr">basicConstraints</span> = CA:<span class="hljs-literal">FALSE</span><br> <br><span class="hljs-section">[ v3_ca ]</span><br><span class="hljs-attr">basicConstraints</span>        = CA:<span class="hljs-literal">TRUE</span><br> <br><span class="hljs-section">[ req_attributes ]</span><br></code></pre></td></tr></table></figure></p><h3 id="创建二级代理ca证书">1.2.3. 创建二级代理CA证书</h3><p>首先确定当前目录为 {自定义目录}/ca_dir/agent/ <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建私钥</span><br><span class="hljs-built_in">sudo</span> openssl genrsa -out ./key/agent_private_key.pem 2048<br><span class="hljs-comment"># 创建签发请求</span><br><span class="hljs-built_in">sudo</span> openssl req -new -key ./key/agent_private_key.pem -out ./key/agent.csr -config openssl.cnf<br><span class="hljs-comment"># 使用根证书签发代理CA</span><br><span class="hljs-built_in">sudo</span> openssl ca -<span class="hljs-keyword">in</span> ./key/agent.csr -out ./key/agent.crt -config ../root/openssl.cnf<br></code></pre></td></tr></table></figure> <imgsrc="8.png"alt="image.png" /><br />注意这里使用的是根证书的配置文件，里面配置了根证书及其私钥的文件名等签名配置。<br />通过命令来查看证书内容：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl x509 -text -<span class="hljs-keyword">in</span> ./key/agent.crt<br></code></pre></td></tr></table></figure> <img src="9.png" alt="image.png" /><br />这里看到：<br />Issuer 内标注了 代理CA证书是由根证书签发的。<br />X509v3extensions 下有着 CA:TRUE的标注，表明代理CA证书可以签发下一级证书。<br />但代理CA证书不能用于签发其他代理CA证书（在配置文件中已设置），而实际上的一些代理CA是可以继续签发的其他代理CA的。<br />这里也可以到root/index.txt中查看到根证书已签发的证书： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> root/index.txt<br></code></pre></td></tr></table></figure> <img src="10.png"alt="image.png" /></p><h2 id="创建三级服务器证书">1.3. 创建三级服务器证书</h2><h3 id="创建目录及配置文件">1.3.1. 创建目录及配置文件</h3><p>首先创建目录并创建配置文件： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &#123;自定义目录&#125;/ca_dir<br><span class="hljs-built_in">mkdir</span> seriver<br>vim openssl.cnf<br></code></pre></td></tr></table></figure> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[ req ]</span><br><span class="hljs-attr">prompt</span>             = <span class="hljs-literal">no</span><br><span class="hljs-attr">distinguished_name</span> = server_distinguished_name<br><span class="hljs-attr">req_extensions</span>     = req_ext<br><span class="hljs-attr">x509_extensions</span>= v3_req<br><span class="hljs-attr">attributes</span>= req_attributes<br> <br><span class="hljs-section">[ server_distinguished_name ]</span><br><span class="hljs-attr">commonName</span>              = CQU_seriver<br><span class="hljs-attr">stateOrProvinceName</span>     = ChongQing<br><span class="hljs-attr">countryName</span>             = CN<br><span class="hljs-attr">organizationName</span>        = CQU<br><span class="hljs-attr">organizationalUnitName</span>  = CQU IT seriver<br> <br><span class="hljs-section">[ v3_req ]</span><br><span class="hljs-attr">basicConstraints</span>        = CA:<span class="hljs-literal">FALSE</span><br><span class="hljs-attr">keyUsage</span> = nonRepudiation, digitalSignature, keyEncipherment<br> <br><span class="hljs-section">[ req_attributes ]</span><br> <br><span class="hljs-section">[ req_ext ]</span><br><span class="hljs-attr">subjectAltName</span>      = @alternate_names<br><br><span class="hljs-section">[ alternate_names ]</span><br><span class="hljs-attr">DNS.1</span>        = cqu.edu.cn<br></code></pre></td></tr></table></figure>这里服务器配置文件内则主要配置的是服务器的信息。</p><h3 id="创建服务器证书并签名">1.3.2. 创建服务器证书并签名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建私钥</span><br><span class="hljs-built_in">sudo</span> openssl genrsa -out ./seriver_private_key.pem 2048<br><span class="hljs-comment"># 创建前面请求</span><br><span class="hljs-built_in">sudo</span> openssl req -new -key ./seriver_private_key.pem -out ./seriver.csr -config openssl.cnf<br><span class="hljs-comment"># 使用代理CA来签发服务器证书</span><br><span class="hljs-built_in">sudo</span> openssl ca -<span class="hljs-keyword">in</span> ./seriver.csr -out ./seriver.crt -config ../agent/openssl.cnf<br></code></pre></td></tr></table></figure><p><img src="11.png" alt="image.png" /><br />这里可以直接看到log里面有CA:FALSE，表明本证书不能进行签发。</p><h1 id="代码实现证书链的构建发送及验证">2.代码实现证书链的构建、发送及验证</h1><p>实验目标：<br />现在目前有节点A和节点B，其都保存并信任根证书。然后节点A需要构建一条证书链(服务器证书到根证书)，并将其发送给节点B。由于节点B信任根证书，所以可以将信任通过证书链传递到了服务器证书，从而验证了节点A的身份。在后续通讯中即可以通过服务器证书中的公钥进行加密，这时只有节点A拥有的私钥才可以解密(本文仅实现证书链的构建、发送即验证，不实现后续通讯)。<br />这里使用ROS1、C++、OpenSSL来实现。<br />代码仓库：<br />github：https://github.com/LinMu-z/ROS-OpenSSL-X509-Certificate-Verification<br />gitee：https://gitee.com/forestwood/ROS-OpenSSL-X509-Certificate-Verification</p><blockquote><p>若读者对于C++基础语法不太熟悉，建议先学习一波。作者在学习使用OpenSSL时查阅到的中文教学资料较少，强烈推荐读者使用ChatGPT 来查阅本文中使用到OpenSSL相关方法。ps:本文中的部分代码为ChatGPT编写。</p></blockquote><p>这里附上相关网址：<br />ROS官网： <ahref="https://www.ros.org/">https://www.ros.org/</a><br />ROS官方文档：<ahref="http://wiki.ros.org/cn">http://wiki.ros.org/cn</a><br />OpenSSL官网：<ahref="https://www.openssl.org/">https://www.openssl.org/</a><br />OpenSSL中文手册：<ahref="https://www.openssl.net.cn/">https://www.openssl.net.cn/</a></p><h2 id="ros说明">2.1. ROS说明</h2><h3 id="消息订阅">2.1.1. 消息订阅</h3><p>ROS中的消息订阅模式：<br />在这里发布者(publisher)和订阅者(subscriber)首先分别向核心节点(master)进行注册，然后发布者和订阅者之间就会建立TCP连接。与常规TCP连接不同的是，消息的发送是单向的。这也就是设计模式中的发布订阅模式。<br /><imgsrc="12.png"alt="ROS证书链.drawio.png" /><br />具体的ROS的命令以及该如何进行开发，网上有许多可以轻易搜索到的资料，请读者自行学习。</p><h3 id="自定义消息类型">2.1.2. 自定义消息类型</h3><p>首先要在包目录下创建msg目录，并创建自定义消息格式文件如下：<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">Header</span> <span class="hljs-keyword">header</span><br><span class="hljs-built_in">string</span> <span class="hljs-built_in">data</span><br><span class="hljs-built_in">string</span><span class="hljs-meta">[</span><span class="hljs-meta">]</span> certs<br></code></pre></td></tr></table></figure> header 为消息头文件，data 为主要传输数据，certs为证书链。</p><h3 id="配置文件">2.1.3. 配置文件</h3><p>首先注意要查找到对应依赖。 <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">find_package</span>(catkin REQUIRED COMPONENTS<br>  roscpp<br>  std_msgs<br>  message_generation<br>)<br><span class="hljs-keyword">find_package</span>(OpenSSL REQUIRED)<br></code></pre></td></tr></table></figure>对于自定义消息也要添加消息文件，并生成消息。 <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake">add_message_files(<br>  FILES<br>  data.msg<br>)<br>generate_messages(<br>  DEPENDENCIES<br>  std_msgs<br>)<br></code></pre></td></tr></table></figure>然后指定catkin时的 include 目录及依赖。 <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake">catkin_package(<br> INCLUDE_DIRS <span class="hljs-keyword">include</span><br> LIBRARIES info_security<br> CATKIN_DEPENDS roscpp std_msgs message_runtime<br>)<br></code></pre></td></tr></table></figure> 指定项目 include目录。 <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">include_directories</span>(<br>  <span class="hljs-keyword">include</span><br>  <span class="hljs-variable">$&#123;catkin_INCLUDE_DIRS&#125;</span><br>)<br></code></pre></td></tr></table></figure> 添加自定义的工具类并指定动态编译 <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_library</span>(checker SHARED src/CertChecker.cpp)<br></code></pre></td></tr></table></figure>添加可执行文件及其依赖，注意这里要加上自定义工具类及OpenSSL，不然会出现找不到 XXX 方法。 <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">add_executable</span>(pub src/pub.cpp)<br><span class="hljs-keyword">target_link_libraries</span>(pub <br>  checker<br>  OpenSSL::Crypto<br>  <span class="hljs-variable">$&#123;catkin_LIBRARIES&#125;</span><br>)<br><span class="hljs-keyword">add_dependencies</span>(pub <span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>_generate_messages_cpp) <br><br><span class="hljs-keyword">add_executable</span>(sub src/sub.cpp)<br><span class="hljs-keyword">target_link_libraries</span>(sub <br>  checker<br>  OpenSSL::Crypto<br>  <span class="hljs-variable">$&#123;catkin_LIBRARIES&#125;</span><br>)<br><span class="hljs-keyword">add_dependencies</span>(sub <span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>_generate_messages_cpp) <br></code></pre></td></tr></table></figure> 在package.xml 中同样要添加依赖标签如下： <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>roscpp<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>std_msgs<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">buildtool_depend</span>&gt;</span>catkin<span class="hljs-tag">&lt;/<span class="hljs-name">buildtool_depend</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build_depend</span>&gt;</span>message_generation<span class="hljs-tag">&lt;/<span class="hljs-name">build_depend</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exec_depend</span>&gt;</span>message_runtime<span class="hljs-tag">&lt;/<span class="hljs-name">exec_depend</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h2 id="openssl-说明">2.2. OpenSSL 说明</h2><p>本文是使用 C++ 来使用 OpenSSL。<br />OpenSSL下有许多模块，本文主要使用的是 X509 证书模块，及一些辅助功能如bio、pem等IO模块。</p><p>对于本文实验，在完成ROS工作空间及开发包创建以及 <a href="#ToGrH">1.创建证书链</a> 中的内容后， 需要完成的内容主要为：</p><ol type="1"><li>从文件中读取出 X509 证书。</li><li>构建证书链</li><li>基于ROS发送并接收证书链</li><li>验证证书</li></ol><p>以下为各内容所需要了解的 OpenSSL 知识。</p><h3 id="证书读取相关">2.2.1. 证书读取相关</h3><p>在 OpenSSL 中证书类为X509，但在实际使用中基本上都是使用其指针。所以在使用完后，需要清理防止内存泄露。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 一般使用的证书对象</span><br>X509* cert;<br><span class="hljs-comment">// 清理证书内存</span><br><span class="hljs-built_in">X509_free</span>(X509* cert);<br></code></pre></td></tr></table></figure> X509 证书的读取有许多种方式，本文中主要通过 BIO来读取文件，然后通过 PEM 来将 BIO 读取到的内容解析为 X509 证书。这里的PEM 其实也是 OpenSSL 常用的文件格式，其主要为基于 base64加密的数据和包裹数据的标题行。<br />主要使用的方法为：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 使用BIO读取文件</span><br><span class="hljs-comment">// const char* filename : 文件名(文件目录)</span><br><span class="hljs-comment">// const char* mode : 读取模式 (r 只读, w 只写, rw 读写)</span><br><span class="hljs-function">BIO* <span class="hljs-title">BIO_new_file</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* mode)</span></span>;<br><br><span class="hljs-comment">// 通过PEM解析BIO</span><br><span class="hljs-comment">// BIO* bp : BIO对象指针</span><br><span class="hljs-comment">// X509** x : 解析出的X509证书指针保存地址，函数中会创建一个新的证书对象并将其指针写入到传入地址中。</span><br><span class="hljs-comment">// pem_password_cb* cb : 口令回调函数(本文未使用)</span><br><span class="hljs-comment">// void* u : 回调函数参数(本文未使用)</span><br><span class="hljs-function">X509* <span class="hljs-title">PEM_read_bio_X509</span><span class="hljs-params">(BIO* bp, X509** x, pem_password_cb* cb, <span class="hljs-type">void</span>* u)</span></span><br></code></pre></td></tr></table></figure></p><h3 id="构建证书链相关">2.2.2. 构建证书链相关</h3><p>在 OpenSSL 中的证书链保存格式为 <strong>X509 证书栈</strong>：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 证书链保存格式</span><br><span class="hljs-built_in">STACK_OF</span>(X509)* chain;<br><span class="hljs-comment">// 证书链添加证书入栈</span><br><span class="hljs-comment">// STACK_OF(X509)* chain : 证书链指针</span><br><span class="hljs-comment">// X509* cert : X509 证书指针</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sk_X509_push</span><span class="hljs-params">(STACK_OF(X509)* chain, X509* cert)</span></span>;<br><span class="hljs-comment">// 证书链删除栈顶证书</span><br><span class="hljs-comment">// STACK_OF(X509)* chain : 证书链指针</span><br><span class="hljs-function">X509* <span class="hljs-title">sk_X509_pop</span><span class="hljs-params">(STACK_OF(X509)* chain)</span></span>;<br></code></pre></td></tr></table></figure> 这里可以看到主要是使用了栈来保存X509对象，然后通过使用栈对象的指针来操作证书链。<br />如果只是构建一条证书链的话，可以直接使用上述push和pop方法，但其并不能保证证书链有效。<br />如果我们需要构建一条<strong>可信证书链</strong>，首先我们需要确保首先证书链是有效的，其次证书链必须可以链接到一个可信证书。所以本文中使用<strong>证书上下文</strong>来验证并生成证书链。而要使用上下文，则需要了解一些其相关知识。<br />首先上下文中需要大量使用到<strong>可信证书库(TrustedX509 Store)</strong>或<strong>可信证书链(TrustedChain)</strong>这两个都是帮助上下文判断证书是否可信的根本，两个选择一个使用即可，本文中使用了可信证书库。然后则是<strong>吊销证书列表(CertificateRevocation List, CRL)</strong>，常规的证书验证都是需要 CRL检查的，以排除证书链中已吊销的证书，但其需要联网并且本次实验为本地自建证书链，所以需要将其禁用。相对于信任证书链对于证书验证而言，还有<strong>非可信证书链(UntrustedChain)</strong>。我们在构建证书链时，可能有一部分中间证书是非信任的，但其又作为证书链的一部分不可或缺，所以我们可以将其完整添加到非可信证书链中用于辅助构建可信证书链。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 可信证书库</span><br>X509_STORE* store;<br><span class="hljs-comment">// 证书上下文及其创建</span><br>X509_STORE_CTX* ctx = <span class="hljs-built_in">X509_STORE_CTX_new</span>();<br><span class="hljs-comment">// 证书上下文初始化</span><br><span class="hljs-comment">// X509_STORE_CTX* ctx : 证书上下文指针</span><br><span class="hljs-comment">// X509_STORE* store : 可信证书库</span><br><span class="hljs-comment">// X509* x509 : 待验证证书</span><br><span class="hljs-comment">// STACK_OF(X509)* untrusted_chain : 非可信证书链</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">X509_STORE_CTX_init</span><span class="hljs-params">(X509_STORE_CTX* ctx, X509_STORE* store, X509* x509, STACK_OF(X509)* untrusted_chain)</span></span>;<br><span class="hljs-comment">// 禁用 CRL 检查 (直接使用即可，这里就不解释了)</span><br><span class="hljs-built_in">X509_STORE_set_flags</span>(store, X509_V_FLAG_ALLOW_PROXY_CERTS | X509_V_FLAG_IGNORE_CRITICAL);<br><span class="hljs-comment">// 证书验证</span><br><span class="hljs-comment">// 返回1表示验证通过，其他表示未通过</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">X509_verify_cert</span><span class="hljs-params">(X509_STORE_CTX* ctx)</span></span>;<br><span class="hljs-comment">// 获取构建的可信证书链 </span><br><span class="hljs-built_in">STACK_OF</span>(X509)* <span class="hljs-built_in">X509_STORE_CTX_get1_chain</span>(X509_STORE_CTX *ctx);<br><span class="hljs-comment">// 清理上下文(清空配置)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">X509_STORE_CTX_cleanup</span><span class="hljs-params">(X509_STORE_CTX *ctx)</span></span><br><span class="hljs-function"><span class="hljs-comment">// 释放上下文(释放内存)</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">X509_STORE_CTX_free</span><span class="hljs-params">(X509_STORE_CTX *ctx)</span></span><br></code></pre></td></tr></table></figure></p><h3 id="发送及接收上下文相关">2.2.3. 发送及接收上下文相关</h3><p>对于X509对象而言，我们需要将其转化为一个常用的消息格式，作者这里为了方便选择直接使用字符串std::string来保存X509对象。而对于证书链，刚好ROS支持可变长度数组(vector)，所以这里就直接使用字符串数组来发送了。<br />然后我们的工作就变成了X509 的序列化和反序列化，作者这里直接使用了 ChatGPT来编写下列代码，所以就不多解释啦。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">std::string <span class="hljs-title">x509_to_string</span><span class="hljs-params">(X509 *cert)</span> </span>&#123;<br>    std::string cert_str;<br>    BIO *bio = <span class="hljs-built_in">BIO_new</span>(<span class="hljs-built_in">BIO_s_mem</span>());<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">PEM_write_bio_X509</span>(bio, cert)) &#123;<br>        <span class="hljs-type">char</span> *cert_data;<br>        <span class="hljs-type">long</span> cert_size = <span class="hljs-built_in">BIO_get_mem_data</span>(bio, &amp;cert_data);<br>        cert_str.<span class="hljs-built_in">assign</span>(cert_data, cert_size);<br>    &#125;<br>    <span class="hljs-built_in">BIO_free</span>(bio);<br>    <span class="hljs-keyword">return</span> cert_str;<br>&#125;<br><br><span class="hljs-function">X509* <span class="hljs-title">string_to_x509</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; cert_str)</span> </span>&#123;<br>    BIO* cert_bio = <span class="hljs-built_in">BIO_new_mem_buf</span>(cert_str.<span class="hljs-built_in">data</span>(), cert_str.<span class="hljs-built_in">size</span>());<br>    <span class="hljs-keyword">if</span> (cert_bio == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    X509* cert = <span class="hljs-built_in">PEM_read_bio_X509</span>(cert_bio, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-built_in">BIO_free</span>(cert_bio);<br>    <span class="hljs-keyword">return</span> cert;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="验证证书相关">2.2.4. 验证证书相关</h3><p>在 <a href="#DicWq">2.2.2. 构建证书链相关</a>中以及提到了关键的证书验证方法 X509_verify_cert，但这个方法的默认验证函数是由 OpenSSL封装的，我们并不清楚内部实现的验证逻辑。<br />不过大致上可以描述为：<br />在签发证书时CA 会根据证书内的信息 通过某个 hash 算法得到其 hash值，然后用自己的私钥对其进行加密，从而得到了数字签名。<br />在验证证书时，我们通过证书内的签发者信息，去查找到签发者的证书，进而获取到其公钥之后使用公钥对数字签名进行解密得到hash值 h1，同样对待验证证书内的信息通过同样的 hash 算法计算得到 hash 值h2 ，然后对比 h1 和 h2 即可知道证书有无被串改。<br />OpenSSL还是提供了自定义验证逻辑的回调函数配置方法： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 配置自定义的验证逻辑回调函数</span><br><span class="hljs-comment">// X509_STORE_CTX *ctx : 证书上下文</span><br><span class="hljs-comment">// X509_STORE_CTX_verify_cb verify : 自定义的证书验证函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">X509_STORE_CTX_set_verify_cb</span><span class="hljs-params">(X509_STORE_CTX* ctx, X509_STORE_CTX_verify_cb verify)</span></span>;<br><br><span class="hljs-comment">// 自定义证书验证函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">verifyCallback</span><span class="hljs-params">(<span class="hljs-type">int</span> ok, X509_STORE_CTX* ctx)</span> </span>&#123;<br>    <span class="hljs-comment">// 自定义验证逻辑</span><br>    <span class="hljs-comment">// 返回值为1表示验证成功，0表示验证失败</span><br>&#125;<br><br><span class="hljs-comment">// 获取当前验证证书</span><br><span class="hljs-function">X509* <span class="hljs-title">X509_STORE_CTX_get_current_cert</span><span class="hljs-params">(X509_STORE_CTX* ctx)</span></span>;<br><span class="hljs-comment">// 获取证书信息</span><br><span class="hljs-function">X509_NAME* <span class="hljs-title">X509_get_subject_name</span><span class="hljs-params">(<span class="hljs-type">const</span> X509* a)</span></span><br><span class="hljs-function"><span class="hljs-comment">// 获取错误层数</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">X509_STORE_CTX_get_error_depth</span><span class="hljs-params">(X509_STORE_CTX* ctx)</span></span><br><span class="hljs-function"><span class="hljs-comment">// 获取错误</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">X509_STORE_CTX_get_error</span><span class="hljs-params">(X509_STORE_CTX *ctx)</span></span><br><span class="hljs-function"><span class="hljs-comment">// 将错误编号转为字符串</span></span><br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-title">X509_verify_cert_error_string</span><span class="hljs-params">(<span class="hljs-type">long</span> n)</span></span><br></code></pre></td></tr></table></figure></p><h2 id="代码讲解">2.3. 代码讲解</h2><p>首先先附上本次实验的文件目录结构：<br /><img src="13.png"alt="image.png" /><br />大致讲解一下 info_securty目录下的主要文件或目录的作用：</p><ul><li>ca_dir ：证书目录</li><li>CertChecker.h CertChecker.cpp ：为方便使用 OpenSSL建立的工具类的头文件及源文件</li><li>Const.h ：定义了证书目录及路径常量 (读者要复现的话需要修改路径)</li><li>data.msg ：ROS 的自定义消息格式文件</li><li>pub.cpp sub.cpp ：发布者和订阅者，里面创建了相应节点并使用了CertChecker ，这里包含主要的实验流程。</li><li>CMakeLists.txt ：CMake 的配置文件，这里包含编译的配置。</li><li>package.xml ：包的说明配置文件，这里主要为 ROS 包的配置，需要与CMakeLists.txt 保持一致。</li></ul><p>其他文件或目录为 ROS工作空间配置文件及编译后产生的相关文件，不需要在意。</p><h3 id="certchecker">2.3.1. CertChecker</h3><p>CertChecker 是用于方便管理和调用 OpenSSL的自定义工具类(以下简称<strong>检查者</strong>)，里面包括三个静态方法及四个成员方法。之所以要创建单独工具类有以下原因：</p><ol type="1"><li>封装部分方法，提升代码可读性、可维护性。</li><li>便于统一进行资源的创建、初始化、回收。</li><li>降低代码耦合。</li></ol><p>检查者头文件及源文件如下： &gt;这里需要注意的是，在初始化中已默认读取了根证书并添加到可信证书库。 &gt;其余代码已有足够多注释，相信读者结合上文可以自行理解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;info_security/Const.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;openssl/bio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;openssl/pem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;openssl/x509.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;openssl/x509_vfy.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;openssl/err.h&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CertChecker</span> &#123;<br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-comment">// 可信证书库</span><br>        X509_STORE* store;<br>        <span class="hljs-comment">// 可信证书链</span><br>        <span class="hljs-built_in">STACK_OF</span>(X509)* trusted_chain;<br>        <span class="hljs-comment">// 非可信证书链</span><br>        <span class="hljs-built_in">STACK_OF</span>(X509)* untrusted_chain;<br>        <span class="hljs-comment">// 构建的证书链</span><br>        <span class="hljs-built_in">STACK_OF</span>(X509)* build_chain;<br>        <br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-comment">// 无参构造</span><br>        <span class="hljs-built_in">CertChecker</span>();<br>        <span class="hljs-comment">// 析构函数</span><br>        ~<span class="hljs-built_in">CertChecker</span>();<br>        <span class="hljs-comment">// 从文件中读取证书</span><br>        <span class="hljs-function"><span class="hljs-type">static</span> X509* <span class="hljs-title">getCert</span><span class="hljs-params">(std::string certPath)</span></span>;<br>        <span class="hljs-comment">// 将 X509 证书转化为字符串</span><br>        <span class="hljs-function"><span class="hljs-type">static</span> std::string <span class="hljs-title">x509_to_string</span><span class="hljs-params">(X509 *cert)</span></span>;<br>        <span class="hljs-comment">// 从字符串中解析出 X509 证书</span><br>        <span class="hljs-function"><span class="hljs-type">static</span> X509* <span class="hljs-title">string_to_x509</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; cert_str)</span></span>;<br>        <span class="hljs-comment">// 添加进入可信证书库</span><br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">addToStore</span><span class="hljs-params">(X509* cert)</span></span>;<br>        <span class="hljs-comment">// 添加进入证书链 trust: 是否可信</span><br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">addToChain</span><span class="hljs-params">(X509* cert,<span class="hljs-type">bool</span> trust)</span></span>;<br>        <span class="hljs-comment">// 校验证书</span><br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">verifyCert</span><span class="hljs-params">(X509* cert)</span></span>;<br>        <span class="hljs-comment">// 校验证书并构建证书链</span><br>        <span class="hljs-built_in">STACK_OF</span>(X509)* <span class="hljs-built_in">buildCertChain</span>(X509* cert);<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;info_security/CertChecker.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br>CertChecker::<span class="hljs-built_in">CertChecker</span>(<span class="hljs-comment">/* args */</span>)<br>&#123;<br>    store = <span class="hljs-built_in">X509_STORE_new</span>();<br>    <span class="hljs-comment">// 设置默认证书目录 </span><br>    <span class="hljs-built_in">X509_STORE_set_default_paths</span>(store);<br>    trusted_chain = <span class="hljs-built_in">sk_X509_new_null</span>();<br>    untrusted_chain = <span class="hljs-built_in">sk_X509_new_null</span>();<br>    build_chain = <span class="hljs-built_in">sk_X509_new_null</span>();<br><br>    <span class="hljs-comment">// 加载受信任的证书(根证书)</span><br>    std::string rootPath = CA_DIR_ROOT + <span class="hljs-string">&quot;key/root.crt&quot;</span>;<br>    X509* root = CertChecker::<span class="hljs-built_in">getCert</span>(rootPath);<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">addToStore</span>(root);<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">addToChain</span>(root,<span class="hljs-literal">true</span>);<br>&#125;<br><br>CertChecker::~<span class="hljs-built_in">CertChecker</span>()<br>&#123;<br>    <span class="hljs-comment">// 释放资源</span><br>    <span class="hljs-built_in">X509_STORE_free</span>(store); <br>    <span class="hljs-built_in">sk_X509_free</span>(trusted_chain);<br>    <span class="hljs-built_in">sk_X509_free</span>(untrusted_chain);<br>    <span class="hljs-built_in">sk_X509_free</span>(build_chain);<br>&#125;<br><span class="hljs-function">X509* <span class="hljs-title">CertChecker::getCert</span><span class="hljs-params">(std::string certPath)</span> </span>&#123;<br>    <span class="hljs-comment">// 创建 BIO 对象，用于读取文件</span><br>    BIO* bio = <span class="hljs-built_in">BIO_new_file</span>(certPath.<span class="hljs-built_in">c_str</span>(), <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(bio == <span class="hljs-literal">NULL</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;读取文件出错&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    X509* cert = <span class="hljs-literal">nullptr</span>; <br>    <span class="hljs-built_in">PEM_read_bio_X509</span>(bio, &amp;cert, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-keyword">if</span>(!cert) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;解析文件出错&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-comment">// 关闭 BIO 对象</span><br>    <span class="hljs-built_in">BIO_free</span>(bio);<br>    <span class="hljs-keyword">return</span> cert;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CertChecker::addToChain</span><span class="hljs-params">(X509* cert,<span class="hljs-type">bool</span> trust)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(cert == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">// 入栈</span><br>    <span class="hljs-keyword">if</span>(trust) &#123;<br>        <span class="hljs-built_in">sk_X509_push</span>(trusted_chain, cert);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">sk_X509_push</span>(untrusted_chain, cert);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CertChecker::addToStore</span><span class="hljs-params">(X509* cert)</span> </span>&#123;<br>    <span class="hljs-comment">// 将证书添加到 X509_STORE 中</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">X509_STORE_add_cert</span>(store, cert) != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 错误处理</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">verifyCallback</span><span class="hljs-params">(<span class="hljs-type">int</span> ok, X509_STORE_CTX *ctx)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 自定义验证逻辑</span><br>    <span class="hljs-comment">// 返回值为1表示验证成功，0表示验证失败</span><br>    X509* cert = <span class="hljs-built_in">X509_STORE_CTX_get_current_cert</span>(ctx);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">256</span>];<br>    <span class="hljs-built_in">X509_NAME_oneline</span>(<span class="hljs-built_in">X509_get_subject_name</span>(cert), buf, <span class="hljs-number">256</span>);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;正在验证：&quot;</span> &lt;&lt; buf &lt;&lt; std::endl;<br>    <br>    <span class="hljs-keyword">if</span> (!ok) &#123;<br>        <span class="hljs-comment">// 验证失败，打印错误信息</span><br>        <span class="hljs-type">int</span> depth = <span class="hljs-built_in">X509_STORE_CTX_get_error_depth</span>(ctx);<br>        <span class="hljs-type">int</span> err = <span class="hljs-built_in">X509_STORE_CTX_get_error</span>(ctx);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error at depth %d: %s\n&quot;</span>, depth, buf);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  Error code %d (%s)\n&quot;</span>, err, <span class="hljs-built_in">X509_verify_cert_error_string</span>(err));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;验证通过&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">CertChecker::verifyCert</span><span class="hljs-params">(X509* cert)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 初始化上下文</span><br>    X509_STORE_CTX *ctx = <span class="hljs-built_in">X509_STORE_CTX_new</span>();<br>    <span class="hljs-keyword">if</span>(ctx == <span class="hljs-literal">nullptr</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;初始化失败&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 参数说明 (ctx, store, 待验证证书, 非信任的待验证证书链)</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">X509_STORE_CTX_init</span>(ctx, store, cert, untrusted_chain)) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;初始化上下文失败&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-comment">// 设置自定义验证回调函数</span><br>    <span class="hljs-comment">// X509_STORE_CTX_set_verify_cb(ctx, verifyCallback);</span><br>    <span class="hljs-comment">// 禁用 CRL 检查</span><br>    <span class="hljs-built_in">X509_STORE_set_flags</span>(store, X509_V_FLAG_ALLOW_PROXY_CERTS | X509_V_FLAG_IGNORE_CRITICAL);<br>    <span class="hljs-comment">// 设置可信证书链</span><br>    <span class="hljs-comment">// X509_STORE_CTX_trusted_stack(ctx, trusted_chain);</span><br>    <span class="hljs-comment">// 验证证书链的可信性</span><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">X509_verify_cert</span>(ctx);<br>    <span class="hljs-comment">// int result = X509_verify(server_cert, store);</span><br>    <span class="hljs-keyword">if</span>(result != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">int</span> err = <span class="hljs-built_in">X509_STORE_CTX_get_error</span>(ctx);<br>        std::cout &lt;&lt; <span class="hljs-built_in">X509_verify_cert_error_string</span>(err) &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-built_in">X509_STORE_CTX_free</span>(ctx);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">// 构建证书链</span><br><span class="hljs-built_in">STACK_OF</span>(X509)* CertChecker::<span class="hljs-built_in">buildCertChain</span>(X509* cert) &#123;<br>    build_chain = <span class="hljs-built_in">sk_X509_new_null</span>();<br><br>    <span class="hljs-comment">// 创建一个验证器并设置一些参数</span><br>    X509_STORE_CTX* ctx = <span class="hljs-built_in">X509_STORE_CTX_new</span>();<br>    <span class="hljs-keyword">if</span> (!ctx) &#123;<br>        <span class="hljs-comment">// 处理错误</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-comment">// 禁用 CRL 检查</span><br>    <span class="hljs-built_in">X509_STORE_set_flags</span>(store, X509_V_FLAG_ALLOW_PROXY_CERTS | X509_V_FLAG_IGNORE_CRITICAL);<br>    <span class="hljs-comment">// 初始化上下文</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">X509_STORE_CTX_init</span>(ctx, store, cert, untrusted_chain)) &#123;<br>        <span class="hljs-comment">// 处理错误</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-comment">// 设置自定义验证回调函数</span><br>    <span class="hljs-built_in">X509_STORE_CTX_set_verify_cb</span>(ctx, verifyCallback);<br>    <span class="hljs-comment">// X509_STORE_CTX_trusted_stack(ctx, trusted_chain);</span><br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">X509_verify_cert</span>(ctx);<br>    <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 验证失败，处理错误</span><br>        <span class="hljs-type">int</span> err = <span class="hljs-built_in">X509_STORE_CTX_get_error</span>(ctx);<br>        <span class="hljs-comment">// 处理错误码</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-comment">// 生成证书链并获取</span><br>    build_chain = <span class="hljs-built_in">X509_STORE_CTX_get1_chain</span>(ctx);<br>    <span class="hljs-built_in">X509_STORE_CTX_cleanup</span>(ctx);<br>    <span class="hljs-built_in">X509_STORE_CTX_free</span>(ctx);<br>    <span class="hljs-keyword">return</span> build_chain;<br>&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">CertChecker::x509_to_string</span><span class="hljs-params">(X509 *cert)</span> </span>&#123;<br>    std::string cert_str;<br>    BIO *bio = <span class="hljs-built_in">BIO_new</span>(<span class="hljs-built_in">BIO_s_mem</span>());<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">PEM_write_bio_X509</span>(bio, cert)) &#123;<br>        <span class="hljs-type">char</span> *cert_data;<br>        <span class="hljs-type">long</span> cert_size = <span class="hljs-built_in">BIO_get_mem_data</span>(bio, &amp;cert_data);<br>        cert_str.<span class="hljs-built_in">assign</span>(cert_data, cert_size);<br>    &#125;<br>    <span class="hljs-built_in">BIO_free</span>(bio);<br>    <span class="hljs-keyword">return</span> cert_str;<br>&#125;<br><br><span class="hljs-function">X509* <span class="hljs-title">CertChecker::string_to_x509</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; cert_str)</span> </span>&#123;<br>    BIO* cert_bio = <span class="hljs-built_in">BIO_new_mem_buf</span>(cert_str.<span class="hljs-built_in">data</span>(), cert_str.<span class="hljs-built_in">size</span>());<br>    <span class="hljs-keyword">if</span> (cert_bio == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    X509* cert = <span class="hljs-built_in">PEM_read_bio_X509</span>(cert_bio, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-built_in">BIO_free</span>(cert_bio);<br>    <span class="hljs-keyword">return</span> cert;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="发布者">2.3.2. 发布者</h3><p>发布者内首先可以看到声明了检查者指针并赋值为空指针，然后则是一个自定义的退出处理函数，在此函数内进行内存回收、打印日志及退出。<br />在主函数内，可以看到首先创建并配置了发布者节点，然后创建证书检查者对象，之后就开始拼接证书路径并开始调用getCert 方法从文件中读取代理CA证书及服务器证书。我们这里通过addToChain(agent, false) 将代理CA证书添加到非信任证书链中。然后调用buildCertChain 方法构建证书链。然后将证书链转为字符串数组并最终添加到自定义消息 msg.certs 内。最后在循环内，将消息发送出去。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ros/ros.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;info_security/data.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;info_security/CertChecker.h&quot;</span></span><br><br><span class="hljs-comment">// 声明证书检查者</span><br>CertChecker* certChecker = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-comment">// 自定义的 Ctrl + C 退出 handler</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MySigintHandler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//这里主要进行退出前的数据保存、内存清理、告知其他节点等工作</span><br>    <span class="hljs-keyword">if</span>(certChecker != <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">delete</span> certChecker;<br>    &#125;<br><span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;shutting down!&quot;</span>);<br>ros::<span class="hljs-built_in">shutdown</span>();<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 中文显示</span><br>    <span class="hljs-built_in">setlocale</span>(LC_ALL,<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">// 初始化节点</span><br>    ros::<span class="hljs-built_in">init</span>(argc,argv,<span class="hljs-string">&quot;publisher&quot;</span>,ros::init_options::NoSigintHandler);<br>    <span class="hljs-comment">// 配置自定义退出 Handler</span><br>    <span class="hljs-built_in">signal</span>(SIGINT, MySigintHandler);<br>    <span class="hljs-comment">// 创建句柄</span><br>    ros::NodeHandle nh;<br>    <span class="hljs-comment">// 创建发布者</span><br>    ros::Publisher pub = nh.<span class="hljs-built_in">advertise</span>&lt;info_security::data&gt;(<span class="hljs-string">&quot;fang&quot;</span>,<span class="hljs-number">10</span>);<br>    <span class="hljs-comment">// 设置发布频率(Hz) 这里是0.5 所以是两秒一次</span><br>    <span class="hljs-function">ros::Rate <span class="hljs-title">rate</span><span class="hljs-params">(<span class="hljs-number">0.5</span>)</span></span>;<br><br>    <span class="hljs-comment">// 创建要发布的消息</span><br>    info_security::data msg;<br><br>    <span class="hljs-comment">// 创建证书检查者</span><br>    certChecker = <span class="hljs-keyword">new</span> <span class="hljs-built_in">CertChecker</span>();<br><br>    <span class="hljs-comment">// 从文件中读取代理证书并添加到非信任证书链</span><br>    std::string agentPath = CA_DIR_AGENT + <span class="hljs-string">&quot;key/agent.crt&quot;</span>;<br>    X509* agent = CertChecker::<span class="hljs-built_in">getCert</span>(agentPath);<br>    certChecker-&gt;<span class="hljs-built_in">addToChain</span>(agent,<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-comment">// 从文件中读取服务器证书</span><br>    std::string servicePath = CA_DIR_SERIVER + <span class="hljs-string">&quot;seriver.crt&quot;</span>;<br>    X509* service = CertChecker::<span class="hljs-built_in">getCert</span>(servicePath);<br><br>    <span class="hljs-comment">// 构建服务器验证的证书链</span><br>    <span class="hljs-built_in">STACK_OF</span>(X509)* chain = certChecker-&gt;<span class="hljs-built_in">buildCertChain</span>(service);<br>    <span class="hljs-keyword">if</span> (chain != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;证书验证通过&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">ROS_ERROR</span>(<span class="hljs-string">&quot;证书验证失败&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 将证书链解析进去字符串数组 certs</span><br>    <span class="hljs-type">int</span> length = <span class="hljs-built_in">sk_X509_num</span>(chain);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;证书链长:&quot;</span> &lt;&lt; length &lt;&lt; std::endl;<br>    std::string certs[length]; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;length;i++) &#123;<br>        X509* tempCert = <span class="hljs-built_in">sk_X509_value</span>(chain,i);<br>        certs[i] = CertChecker::<span class="hljs-built_in">x509_to_string</span>(tempCert);<br>        std::cout &lt;&lt; certs[i] &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 正式发送消息都循环</span><br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(ros::ok)<br>    &#123;<br>        count++;<br>        std::stringstream ss;<br>        ss &lt;&lt; <span class="hljs-string">&quot;当前是第&quot;</span> &lt;&lt; count &lt;&lt; <span class="hljs-string">&quot;条消息!&quot;</span>;<br><br>        <span class="hljs-comment">// 组装消息</span><br>        msg.header.seq = count;<br>        msg.header.stamp = ros::Time::<span class="hljs-built_in">now</span>();<br>        msg.header.frame_id = <span class="hljs-string">&quot;cert&quot;</span>;<br>        msg.data = ss.<span class="hljs-built_in">str</span>();<br>        msg.certs.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">for</span>(std::string cert:certs) &#123;<br>            msg.certs.<span class="hljs-built_in">push_back</span>(cert);<br>        &#125;<br>        <span class="hljs-comment">// 发布消息</span><br>        pub.<span class="hljs-built_in">publish</span>(msg);<br>        <span class="hljs-comment">// 打印 log</span><br>        <span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;%s&quot;</span>,ss.<span class="hljs-built_in">str</span>().<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-comment">// 休眠指定时间</span><br>        rate.<span class="hljs-built_in">sleep</span>();<br>        ros::<span class="hljs-built_in">spinOnce</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="订阅者">2.3.3. 订阅者</h3><p>在订阅者中同样声明了一个检查者、定义了退出处理函数。在主函数中也是主要定义节点，不同的是这里有一个消息处理回调函数，即订阅者在接收到消息后就会调用这个函数进行处理。在消息处理回调函数中，这里首先打印一些日志，然后将消息中的字符串重新解析为证书并添加到非信任证书链，这里我们保存下第一个证书即服务器证书的指针。然后调用verifyCert 对证书进行校验。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ros/ros.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;info_security/data.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;info_security/CertChecker.h&quot;</span></span><br><br><span class="hljs-comment">// 创建证书检查者</span><br>CertChecker* certChecker = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-comment">// 自定义的 Ctrl + C 退出 handler</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MySigintHandler</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//这里主要进行退出前的数据保存、内存清理、告知其他节点等工作</span><br>    <span class="hljs-keyword">if</span>(certChecker != <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">delete</span> certChecker;<br>    &#125;<br><span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;shutting down!&quot;</span>);<br>ros::<span class="hljs-built_in">shutdown</span>();<br>&#125;<br><br><span class="hljs-comment">// 消息处理回调函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doMsg</span><span class="hljs-params">(<span class="hljs-type">const</span> info_security::dataConstPtr &amp;msg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 打印 log</span><br>    <span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;订阅：%s&quot;</span>,msg-&gt;data.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-comment">// 使用 cert 保存服务器证书</span><br>    X509* cert = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-comment">// 获取证书链长度</span><br>    <span class="hljs-type">int</span> cert_count = msg-&gt;certs.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-comment">// 遍历证书字符串</span><br>    <span class="hljs-keyword">for</span>(std::string certString:msg-&gt;certs) &#123;<br>        <span class="hljs-comment">// 将字符串重新解析为 X509 证书</span><br>        X509* temp = CertChecker::<span class="hljs-built_in">string_to_x509</span>(certString);<br>        <span class="hljs-keyword">if</span>(temp == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-built_in">ROS_ERROR</span>(<span class="hljs-string">&quot;解析失败&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// 使用 cert 接收服务器证书</span><br>        <span class="hljs-keyword">if</span>(cert == <span class="hljs-literal">nullptr</span>) &#123;<br>            cert = temp;<br>        &#125;<br>        <span class="hljs-comment">// 将 证书添加到 非信任证书链</span><br>        certChecker-&gt;<span class="hljs-built_in">addToChain</span>(temp,<span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">// 打印 解析文件消息</span><br>        <span class="hljs-type">char</span> buf[<span class="hljs-number">256</span>];<br>        <span class="hljs-built_in">X509_NAME_oneline</span>(<span class="hljs-built_in">X509_get_subject_name</span>(temp), buf, <span class="hljs-number">256</span>);<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;已解析：&quot;</span> &lt;&lt; buf &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-comment">// 验证证书</span><br>    <span class="hljs-type">int</span> res = certChecker-&gt;<span class="hljs-built_in">verifyCert</span>(cert);<br>    <span class="hljs-keyword">if</span> (res == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">ROS_INFO</span>(<span class="hljs-string">&quot;证书验证通过&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">ROS_ERROR</span>(<span class="hljs-string">&quot;证书验证失败&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 中文显示</span><br>    <span class="hljs-built_in">setlocale</span>(LC_ALL,<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">// 初始化节点</span><br>    ros::<span class="hljs-built_in">init</span>(argc,argv,<span class="hljs-string">&quot;subscriber&quot;</span>,ros::init_options::NoSigintHandler);<br>    <span class="hljs-comment">// 配置自定义退出 Handler</span><br>    <span class="hljs-built_in">signal</span>(SIGINT, MySigintHandler);<br><br>    <span class="hljs-comment">// 创建句柄</span><br>    ros::NodeHandle nh;<br>    <span class="hljs-comment">// 创建订阅者</span><br>    ros::Subscriber sub = nh.<span class="hljs-built_in">subscribe</span>(<span class="hljs-string">&quot;fang&quot;</span>,<span class="hljs-number">10</span>,doMsg);<br>    <span class="hljs-comment">// 创建证书检查者</span><br>    certChecker = <span class="hljs-keyword">new</span> <span class="hljs-built_in">CertChecker</span>();<br>    <span class="hljs-comment">// 进入循环接收消息</span><br>    ros::<span class="hljs-built_in">spin</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="额外说明">2.3.4. 额外说明</h3><ol type="1"><li>非信任证书链可以包含待验证证书及一些可信证书</li><li>如果代码中通过使用 setlocale(LC_ALL,"")来使得输出显示中文，这样的前提条件是当前环境中已经有中文语言包。如果读者在复现时出现中文显示异常(??? 或 其他乱码)，可以参照 <a href="http://t.csdn.cn/TvdQ3">Ubuntu安装中文支持</a>。</li><li>发布者和订阅者的自定义退出处理函数略有不同，在发布者中多调用了exit(0) ，这是因为两者的循环方式不同。</li><li>本文中没有真正实现自定义证书验证，仅提供了模板及日志便于查看学习。</li></ol><h1 id="运行测试">3. 运行测试</h1><p>启动一个终端，进入ROS工作空间目录</p><ol type="1"><li>source 一下本地目录下的ros目录内的 setup.bash</li><li>编译项目</li><li>启动核心节点 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /opt/ros/noetic/setup.bash <br>catkin_make<br>roscore<br></code></pre></td></tr></table></figure> <img src="14.png"alt="image.png" /><br /><img src="15.png" alt="image.png" /><br /><imgsrc="16.png"alt="image.png" /><br />再启动一个终端，进入工作空间，这时里面已经编译出了devel 目录，那么就可以直接 source 该目录下的setup.bash。然后即可启动发布者节点 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> devel/setup.bash<br>rosrun info_security pub<br></code></pre></td></tr></table></figure> <img src="17.png"alt="image.png" /><br /><img src="18.png"alt="image.png" /><br />这里可以看到进行了证书的逐级验证，输入验证通过后，这里会将加密后的证书链打印出来。然后就开始发送消息了。<br />注意这里作者为了截图，所以退出程序了。而读者可以不关闭发布者进行后续操作。</li></ol><p>再启动一个终端，和发布者大致相同，启动订阅者节点。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> devel/setup.bash<br>rosrun info_security sub<br></code></pre></td></tr></table></figure><img src="19.png"alt="image.png" /><br />这里可以看到依次解析各个证书后，验证通过。 &gt;这里说明一下，在发布者中设置了自定义校验来打印日志，所以发布时其实并没有真正进行校验。而在订阅者内，使用的是OpenSSL默认的校验函数，所以实际进行了校验而并没有打印日志。</p><h1 id="写在最后">4. 写在最后</h1><p>本人经验尚浅，如本文有任何错误或改进之处欢迎各位留言！😉<br />如果觉得不错的话，可以<strong>✨</strong>一下吗？</p>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROS</tag>
      
      <tag>OpenSSL</tag>
      
      <tag>SSL</tag>
      
      <tag>证书链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>车辆坐标转换</title>
    <link href="/linmu-blog/2024/08/27/%E8%BD%A6%E8%BE%86%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/"/>
    <url>/linmu-blog/2024/08/27/%E8%BD%A6%E8%BE%86%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="车辆坐标转换">车辆坐标转换</h1><p>解决问题：<br /> 1）地球是不规则的球体，两极扁，赤道鼓。不能简单地做为圆球体来计算；<br /> 2）每纬度在地理位置上的距离是一致的（约111 km），但是每经度之间的距离是不同的（越往两极，东西方向上的距离就越小），不能直接转换为直角坐标系；</p><p>WGS84坐标系全称World Geodetic System -1984，是为了解决GPS定位而产生的全球统一的一个地心坐标系。<br /> ●椭球体：WGS84椭球 <br /> ● 长半径<spanclass="math inline">\(a=6378137m\)</span> <br /> ● 短半径<spanclass="math inline">\(b=6356752.3142m\)</span> <br /> ●第一偏心率平方<spanclass="math inline">\({e_1}^2=0.00669437999013\)</span> <br /> ●第二偏心率平方<spanclass="math inline">\({e_2}^2=0.006739496742227\)</span> <br /> ●扁率<span class="math inline">\(\alpha=1/298.257223563\)</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CenterCoordinate <span class="hljs-title function_">createCenterCoordinateFromBLH</span><span class="hljs-params">(<span class="hljs-type">double</span> latitude, <span class="hljs-type">double</span> longitude, <span class="hljs-type">double</span> altitude)</span> &#123;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">B</span> <span class="hljs-operator">=</span> Math.toRadians(latitude);<br>    <span class="hljs-type">double</span> <span class="hljs-variable">L</span> <span class="hljs-operator">=</span> Math.toRadians(longitude);<br>    <span class="hljs-type">double</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> r/Math.sqrt(<span class="hljs-number">1</span>-e*e*Math.sin(B)*Math.sin(B));<br>    <span class="hljs-type">double</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> (N+altitude)*Math.cos(B)*Math.cos(L);<br>    <span class="hljs-type">double</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> (N+altitude)*Math.cos(B)*Math.sin(L);<br>    <span class="hljs-type">double</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> (N*(<span class="hljs-number">1</span>-e*e)+altitude)*Math.sin(B);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CenterCoordinate</span>(x,y,z);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="车辆方向转换">车辆方向转换</h1><p>上面将经纬度转换为了地心直角坐标，然而速度方向拿到则是一个大陆坐标系下的与正北方的顺时针夹角。所以这里要对其进行转换。<br /></p><embed id="embed" src="大地二位坐标转地心直角三维坐标.drawio.svg" type="image/svg+xml"><p>假设条件：</p><ol type="1"><li>车辆所处大陆平面坐标系与地球球面相切</li></ol><p>已知条件为：</p><ol type="1"><li>车辆坐标 <span class="math inline">\((x_a,y_a,z_a)\)</span></li><li>车辆速度方向与正北方顺时针夹角 <spanclass="math inline">\(\theta\)</span></li></ol><p>首先，根据已知条件1可得车辆所属的平面的一个法向量和平面点法式方程如下：<span class="math display">\[ \overrightarrow{OA} =    \begin{bmatrix}        x_a \\        y_a \\        z_a    \end{bmatrix} \]</span> <span class="math display">\[ x_a(x-x_a) +y_a(y-y_a) + z_a(z-z_a) = 0 \]</span></p><p>根据假设条件1可知，平面内向北的向量 <spanclass="math inline">\(\overrightarrow{O&#39;N}\)</span>这里令其为 <spanclass="math inline">\(\overrightarrow{North}\)</span>与坐标下的Z轴交于 N点。<br /> 首先根据向量加法得到： <span class="math display">\[\overrightarrow{ON} = \overrightarrow{OO&#39;} + \overrightarrow{O‘N}\]</span></p><p>把上式与平面方程联立可得： <span class="math display">\[\overrightarrow{North} =    \begin{bmatrix}        -x_a \\        -y_a \\        \frac{x_a^2+{y_a}^2}{z_a}    \end{bmatrix} \]</span></p><p>根据已知条件<spanclass="math inline">\(\overrightarrow{Speed}\)</span>为车辆速度的单位向量所以有：<span class="math display">\[ \vert \overrightarrow{Speed} \vert = 1\]</span></p><p>根据向量点乘公式： <span class="math display">\[\overrightarrow{North} \cdot \overrightarrow{Speed} = \vert\overrightarrow{North} \vert \vert \overrightarrow{Speed} \vert\cos{\theta} \]</span></p><p>向量 <spanclass="math inline">\(\overrightarrow{Speed}\)</span>在平面上，则其与平面法向量垂直：<span class="math display">\[ \overrightarrow{OA} \cdot\overrightarrow{Speed} = 0 \]</span></p><p>联立上述三个公式得到向量 <spanclass="math inline">\(\overrightarrow{Speed}\)</span>表达式如下：<br />辅助符号： <span class="math display">\[ D_{xy} = {x_{a}}^2+{y_{a}}^2\]</span> <span class="math display">\[ D_{xyz} ={x_{a}}^2+{y_{a}}^2+{z_{a}}^2 \]</span> <span class="math display">\[ V= \sqrt{\frac{1-\cos^2{\theta}}{D_{xy}}} \]</span> <spanclass="math display">\[ U = \sqrt{ \frac{D_{xy} D_{xyz}}{z_a^2} }\]</span></p><p>解1： <span class="math display">\[ \overrightarrow{Speed_1} =    \begin{bmatrix}        yV - \frac{x_{a} z_{a}^2 U\cos{\theta}}{D_{xy} D_{xyz}} \\        -xV - \frac{y z^2 U \cos{\theta}}{D_{xy} D_{xyz}} \\        \frac{z_{a} U \cos{\theta}}{D_{xyz}}    \end{bmatrix} \]</span> 解2： <span class="math display">\[\overrightarrow{Speed_2} =    \begin{bmatrix}        -yV - \frac{x_{a} z_{a}^2 U\cos{\theta}}{D_{xy} D_{xyz}} \\        xV - \frac{y z^2 U \cos{\theta}}{D_{xy} D_{xyz}} \\        \frac{z_{a} U \cos{\theta}}{D_{xyz}}    \end{bmatrix} \]</span> 当 <span class="math inline">\(\theta \in(0, \pi)\)</span>时，取解2；当 <span class="math inline">\(\theta \in(\pi, 2 \pi)\)</span>时，取解1；</p>]]></content>
    
    
    <categories>
      
      <category>GPS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>坐标系转换</tag>
      
      <tag>向量转换</tag>
      
      <tag>GPS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis-过期Key的删除策略</title>
    <link href="/linmu-blog/2024/08/26/Redis-%E8%BF%87%E6%9C%9FKey%E7%9A%84%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/"/>
    <url>/linmu-blog/2024/08/26/Redis-%E8%BF%87%E6%9C%9FKey%E7%9A%84%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="删除策略">1. 删除策略</h1><p>Redis将键的过期时间对时间戳都保存在过期字典中，在删除时通过对比系统当前时间戳和存储的过期时间戳计算得到是否过期。那么如果一个键过期了，Redis是怎么将其删除的呢？我们可以推测出有这样几种删除策略：</p><ul><li>定时删除：在设置过期时间时，创建一个定时器，当定时器到键的过期时间时，进行删除操作。</li><li>惰性删除：当键达到过期时间时，放任其不管，但是当每次访问键时，都检查键是否过期，过期则将其删除。</li><li>定期删除：每隔一段时间，通过某个选择算法，对键的过期时间进行检查，删除过期键。</li></ul><h2 id="定时删除策略">1.1. 定时删除策略</h2><p>定时删除是保证键及时删除最有效的方式。但是定时器是对于CPU不友好的，当定时器与键一一对应时，大量的定时器会占用相当一部分的CPU时间。在业务繁忙时，将CPU时间用在删除与当前任务无关的键上，无疑会对服务器的响应时间和吞吐量造成影响。当然在一些场景下，通过算法优化，去只使用一个定时器触发所有键的过期事件，也是一条具备可行性的思路。</p><h2 id="惰性删除策略">1.2. 惰性删除策略</h2><p>惰性删除是对于CPU最友好的策略。程序仅需要消耗几乎可以忽略不计的CPU时间的操作就能触发键的过期事件，程序的关注点一直聚焦在相关的键上。惰性删除的缺点就和懒惰的不喜欢打扫的人一样，内存空间里面会有大量的“垃圾”。已经过期的键长期存在，只要这个键不被删除，其占用内存就不会释放。在极端情况下，当过期的键不再被访问时，那么它将永远不会被删除。这样的对于内存的浪费是极大的，我们可以理解这样的情况是一种内存泄露。</p><h2 id="定期删除策略">1.3. 定期删除策略</h2><p>定期删除就像是定时删除和惰性删除的折中方案。通过定期触发，减少对CPU时间的浪费；通过不再绑定键过期检查和键等其他操作，避免内存泄露，减少过期键对内存的浪费。定期策略也有两个难以权衡的变量：检查的广度、检查的频率：如果广度和频率过大，这样会浪费大量的CPU时间在遍历检查上；如果广度和频率过小，这样会使得检查并不全面，导致依旧有大量内存浪费。</p><hr /><h1 id="redis的删除策略">2. Redis的删除策略</h1><p>Redis的删除策略融合了惰性删除和定期删除，一方面Redis执行惰性删除，放任键过期；另一方面，为了权衡CPU和内存的浪费，Redis通过随机抽样选择部分键来进行过期检查及删除，当样本中的过期样本占比超过阈值时，再进行一次随机抽样。这样的算法很巧妙地运用狭义概率算法使得数据库中整体的内存浪费基本上在可控范围。然后这个策略也使得系统中的CPU和内存的浪费具备更强的随机性。我们可以推测出Redis的删除策略，一定有这样几个参数：</p><ul><li>定期抽样的时间间隔</li><li>抽样的样本数量</li><li>过期样本占比阈值</li></ul><p>时间间隔是通过配置参数<code>hz</code>设置的，默认为<code>10</code>，也就是一秒<code>10</code>次抽样，换算的时间间隔为<code>100ms</code>。</p><p>通过阅读Redis源码：在<code>6.0.0</code>版本之前，抽样的样本数量和过期样本占比阈值都是固定的，分别为<code>20</code>和<code>25%</code>。在<code>6.0.0</code>版本及之后，样本数量和阈值都取决于配置参数<code>active_exprie_effort</code>。</p><p><span class="math display">\[n_{样本最大数量} = 20 + 5\times(active\_exprie\_effort)\]</span></p><p><spanclass="math display">\[p_{过期占比阈值}=11-active\_exprie\_effort\]</span></p><p>当 \((n_{样本数量})(&gt;p_{过期占比阈值})\) 时，再进行一次采样。<code>active_exprie_effort</code>取值于\([1,10]\)，这个参数越大，则清理越彻底，占用的CPU时间越多。</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>删除策略</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/linmu-blog/2024/08/24/hello-world/"/>
    <url>/linmu-blog/2024/08/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
